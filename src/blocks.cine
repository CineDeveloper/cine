func loadBlocks(intputFiles [[UInt8]]) [Block]
    parse fileIndex, fileName <- intputFiles
        file .= loadFile(fileName)
        if < file.empty?()
            then errorCantLoadFile(fileName)
        lines .= file[].convertTo([UInt8]).asString().split('\n')
        lineIndex := 0
        for
            if block .= lines.getBlock(true, 0, fileName, fileIndex, lineIndex); block.item?()
                then result += block[]
                else break

proc parseBlocks(blocks [Block], :data Data)
    parse _, block <- blocks
        case block.line[0][] of
            "func"; "proc"
                data:add(block.toFunction())
            "type"
                data:add(block.toType())
            "enums"
                block.eol!(1)
                block.subBlocks!()
                parse _, enum <- block.subBlocks
                    enum.noSubBlocks!()
                    enum.eol!(1)
                    enum.line[0].enumName!()
                    data:addEnum(enum.line[0])
            "rules"
                block.subBlocks!()
                data:globalRules += block.subBlocks
            "group"
                block.noSubBlocks!()
                block.eol!(2)
                block.line[1].groupName!()
                data:addGroup(block.line[1])
            "flags"
                block.subBlocks!()
                block.eol!(1)
                flags .= block.subBlocks.getFlags()
                data:add(flags)
            default
                errorNotExpectedToken(block.line[0], "")

func getTypeMembers(blocks [Block], argumets [[UInt8]]) Map([UInt8], TypeMember)
    parse _, membersBlock <- blocks
        members .= membersBlock.getTypeMembersFromOneLine(argumets)
        parse _, member <- members
            if < result[member.name[]].item?()
                then errorAlreadyExist(member.name, "type member")
            result:add(member.name[], member)

func getFlags(blocks [Block]) [Pair(Token, Flag)]
    parse _, block <- blocks
        block.subBlocks!()
        tokenIndex := 0
        name .= block.getFlagName(tokenIndex)
        description .= block.getString(tokenIndex)
        block.eol!(tokenIndex)
        variants := [[UInt8]]
        parse _, variantBlock <- block.subBlocks
            variantBlock.noSubBlocks!()
            tokenIndex = 0
            newVariant .= variantBlock.getString(tokenIndex)
            variantBlock.eol!(tokenIndex)
            parse _, existedVariant <- variants
                if < existedVariant == newVariant
                    then errorAlreadyExist(variantBlock.line[0], "flag variant")
            variants += newVariant
        result += #result[0].create(name, Flag{description: description, variants: variants})

func getFunctionAttributes(attributes [Block]) FunctionAttributes
    parse _, attributeBlock <- attributes
        attributeBlock.noSubBlocks!()
        tokenIndex := 0
        attribute .= attributeBlock.next(tokenIndex)
        case attribute[] of
            "deprecated"
                if < result.deprecated
                    then errorAlreadyExist(attribute, "function attribute")
                result:deprecated = true
            "singleRun"
                if < result.singleRun
                    then errorAlreadyExist(attribute, "function attribute")
                result:singleRun = true
            "alwaysInline"
                if < result.alwaysInline
                    then errorAlreadyExist(attribute, "function attribute")
                if < result.noInline
                    then errorNotExpectedToken(attribute, "")
                result:alwaysInline = true
            "noInline"
                if < result.noInline
                    then errorAlreadyExist(attribute, "function attribute")
                if < result.alwaysInline
                    then errorNotExpectedToken(attribute, "")
                result:noInline = true
            "id"
                if < result.id[] != ""
                    then errorAlreadyExist(attribute, "function attribute")
                attributeBlock.next!(tokenIndex, "=")
                id .= attributeBlock.next(tokenIndex)
                tokenIndex--
                _ = attributeBlock.getString(tokenIndex)
                if < id[] == ""
                    then errorNotExpectedToken(id, "")
                result:id =id
            default
                errorNotExpectedToken(attribute, "")
        attributeBlock.eol!(tokenIndex)
