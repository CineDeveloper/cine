type Token
    value, file [UInt8]
    line, row, fileIndex UInt64

func getItem(token)
    rules
        final = token == Token
        result = [UInt8]
    result = token.value

func coordinatesToString(token)
    rules
        final = token == Token
        result = [UInt8]
    result = "File: ".join(token.file, ", line: ", (token.line + 1).toString(), ", row: ", (token.row + 1).toString(), ". ")

proc enumName!(name)
    rules
        final = name == Token
    nameCorrect := name[][0].lower?() && name[].contain?('_')
    if nameCorrect
        then
            parse _, char <- name[].getAllExceptFirst()
                nameCorrect = nameCorrect && char.fromName?()
            nameCorrect = nameCorrect && !name[].contain?("__")
    if !nameCorrect
        then errorWrongName(name, "enum")

proc groupName!(name)
    rules
        final = name == Token
    nameCorrect := name[][0].upper?()
    if nameCorrect
        then
            parse _, char <- name[].getAllExceptFirst()
                nameCorrect = nameCorrect && char.fromName?()
            nameCorrect = nameCorrect && !name[].contain?("__")
    if !nameCorrect
        then errorWrongName(name, "group")

func replaceValue(token, value)
    rules
        final = token == Token & value == [UInt8]
        result = Token
    result = token
    result:value = value

proc integer!(integer, allowNegative, allowNotDecimal)
    rules
        final = integer == Token & allowNegative == Bool & allowNotDecimal == Bool
    if !integer?(integer[], allowNegative, allowNotDecimal)
        then errorNotExpectedToken(integer, "")

func integer?(integer, allowNegative, allowNotDecimal)
    rules
        final = integer == [UInt8] & allowNegative == Bool & allowNotDecimal == Bool
        result = Bool
    absNumber := ""
    if integer[0] == '-'
        then
            result = allowNegative
            absNumber = integer.getAllExceptFirst()
        else
            absNumber = integer
            result = true
    if result
        then if allowNotDecimal && (absNumber.hasPrefix?("0x") || absNumber.hasPrefix?("0b"))
            then if result = absNumber.getLength() > 2; result
                then parse _, char <- absNumber.getAllExceptFirstN(2)
                    if result = char.digit?() || char >= 'a' && char <= 'f' || char >= 'A' && char <= 'F'; !result
                        then break
            else parse _, char <- absNumber
                if result = char.digit?(); !result
                    then break

proc double!(arg)
    rules
        final = arg == Token
    mutValue := arg[]
    if mutValue[0] == '-'
        then mutValue = mutValue.getAllExceptFirst()
    parts .= mutValue.split('.')
    error := false
    if parts.getLength() == 2
        then parse _, part <- parts
            parse _, char <- part
                if error = !char.digit?(); error
                    then break all
        else error = true
    if error
        then errorIncorrectDouble(arg)
